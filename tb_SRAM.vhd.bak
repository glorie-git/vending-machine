LIBRARy IEEE ;
USE IEEE.STD_LOGIC_1164.all ;
USE IEEE.NUMERIC_STD.all;

-- testbench entities are always empty
ENTITY tb_SRAM IS
END tb_SRAM ;

ARCHITECTURE test of tb_SRAM IS

--1)------------------------------------------------
--copy and paste the entity and change to component
COMPONENT SRAM IS
	PORT
	(
		address		: IN STD_LOGIC_VECTOR (1 DOWNTO 0);
		clock		: IN STD_LOGIC  := '1';
		data		: IN STD_LOGIC_VECTOR (5 DOWNTO 0);
		rden		: IN STD_LOGIC  := '1';
		wren		: IN STD_LOGIC ;
		q		: OUT STD_LOGIC_VECTOR (5 DOWNTO 0)
	);
END COMPONENT;

--this component will be used as a DUT (Device under test), ou will apply stimulus to the DUT's inputs
--verifies the correct/expected functionality at the outputs


--2) inputs and outputs for stimulus
			
signal clk, rst, hard_rst_sig, set_sig, en_sig : std_logic;
signal N_sig, D_sig, Q_sig : STD_LOGIC;
signal data_mem_sig : STD_LOGIC_VECTOR (5 DOWNTO 0);
signal product_sig : STD_LOGIC_VECTOR (1 DOWNTO 0);
SIGNAL addr_out_sig : STD_LOGIC_VECTOR (1 DOWNTO 0);
SIGNAL done_sig, wen_sig : STD_LOGIC;
constant clock_period : time := 10 ns;
			
--3) Instantiate the DUT and bind the signals to the IOs (port map) 
	BEGIN
	DUT : program_unit
			PORT MAP(	clk => clk, rst => rst, hard_rst => hard_rst_sig, set => set_sig, en => en_sig, D => D_sig, N => N_sig,
							Q => Q_sig, data_mem => data_mem_sig, product => product_sig, addr_out => addr_out_sig,
							done => done_sig, wen => wen_sig);

--4) Apply the stimulus ------------------------------------
--Must wait for xx ns between applying stimulus to allow time for output to settle (Tpd)
--appropriate timing (xx ns) is determined in timing simulations

clock_process : 

		PROCESS IS
		BEGIN			
			clk <= '0';
			wait for clock_period/2;
			clk <= '1';
			wait for clock_period/2;	
		END PROCESS;
		
stim_process : 

	PROCESS
		BEGIN
		-- wait for 100 ns;
		set_sig <= '0';
		hard_rst_sig <= '0';
		product_sig <= "XX";
		--NDQ_sig <= "000";
		rst <= '1';
		
		wait for 10 ns;
		
		rst <= '0';
		
		wait for 40 ns;
		
		-- product 00
		en_sig <= '1';
		product_sig <= "00";
		
		wait for 10 ns;
		
		N_sig <= '1';
		D_sig<= '0';
		Q_sig<= '0';
		
		wait for 10 ns;
		
		N_sig <= '0';
		D_sig<= '0';
		Q_sig<= '1';
		
		wait for 10 ns;
		
		N_sig <= '0';
		D_sig<= '1';
		Q_sig<= '0';
		
		wait for 10 ns;
		
		N_sig <= '1';
		D_sig<= '1';
		Q_sig<= '0';
		
		wait for 10 ns;
		
		N_sig <= '0';
		D_sig<= '1';
		Q_sig<= '1';
		
		wait for 10 ns;
		
		N_sig<= '1';
		D_sig<= '0';
		Q_sig<= '1';
		
		wait for 10 ns;
		
		N_sig<= '1';
		D_sig<= '1';
		Q_sig<= '1';
		
		wait for 10 ns;
		
		set_sig <= '1';
		N_sig<= '0';
		D_sig<= '0';
		Q_sig<= '0';
		
		wait for 50 ns;
		
		set_sig <= '0';
		--en _sig <= '0';
		
		wait for 200 ns;
			
		wait;
			
		END PROCESS;
			

END test;